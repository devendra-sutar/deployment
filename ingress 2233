---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: devendra

---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: front-deva
  namespace: devendra
spec:
  replicas: 1
  selector:
    matchLabels:
      app: client22
  template:
    metadata:
      labels:
        app: client22
    spec:
      containers:
      - name: deva
        image: ashish7974/omega-frontend
        ports:
        - containerPort: 9980
        env:
        - name: VITE_OMEGA_IP
          value: "https://example.com/api"  # Points to backend via Ingress
        - name: VITE_APP_KEYCLOCK_CLIENT
          value: "cluster-testing1"
        - name: VITE_APP_KEYCLOCK_REALM
          value: "gitlab"
        - name: VITE_LGTM_IP
          value: "10.0.34.12"

---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: front-dev-srv
  namespace: devendra
spec:
  type: ClusterIP
  selector:
    app: client22
  ports:
  - name: https
    protocol: TCP
    port: 9980
    targetPort: 9980

---
# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: back-dev
  namespace: devendra
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dev
  template:
    metadata:
      labels:
        app: dev
    spec:
      containers:
      - name: dev-back22
        image: ashish7974/omega-backend
        ports:
        - containerPort: 8000
        env:
        - name: DB_HOST
          value: "10.0.35.12"
        - name: DB_PORT
          value: "5432"
        - name: DB_NAME
          value: "test"
        - name: DB_USER
          value: "test"
        - name: DB_PASSWORD
          value: "linux"
        - name: OMEGA_IP
          value: "https://example.com"  # Points to frontend via Ingress

---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: dev-back-srv
  namespace: devendra
spec:
  type: ClusterIP
  selector:
    app: dev
  ports:
  - name: https
    protocol: TCP
    port: 8000
    targetPort: 8000

---
# Ingress for Frontend and Backend
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: app-ingress
  namespace: devendra
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  tls:
    - hosts:
        - example.com
      secretName: my-tls-secret
  rules:
    - host: example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: front-dev-srv
                port:
                  number: 9980
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: dev-back-srv
                port:
                  number: 8000

==============================================================================================================

---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: devendra

---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: front-deva
  namespace: devendra
spec:
  replicas: 1
  selector:
    matchLabels:
      app: client22
  template:
    metadata:
      labels:
        app: client22
    spec:
      containers:
      - name: deva
        image: ashish7974/omega-frontend
        ports:
        - containerPort: 9980
        env:
        - name: VITE_OMEGA_IP
          value: "https://example.com/api"  # Points to backend via Ingress
        - name: VITE_APP_KEYCLOCK_CLIENT
          value: "cluster-testing1"
        - name: VITE_APP_KEYCLOCK_REALM
          value: "gitlab"
        - name: VITE_LGTM_IP
          value: "10.0.34.12"

---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: front-dev-srv
  namespace: devendra
spec:
  type: ClusterIP
  selector:
    app: client22
  ports:
  - name: https
    protocol: TCP
    port: 9980
    targetPort: 9980

---
# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: back-dev
  namespace: devendra
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dev
  template:
    metadata:
      labels:
        app: dev
    spec:
      containers:
      - name: dev-back22
        image: ashish7974/omega-backend
        ports:
        - containerPort: 8000
        env:
        - name: DB_HOST
          value: "10.0.35.12"
        - name: DB_PORT
          value: "5432"
        - name: DB_NAME
          value: "test"
        - name: DB_USER
          value: "test"
        - name: DB_PASSWORD
          value: "linux"
        - name: OMEGA_IP
          value: "https://example.com"  # Points to frontend via Ingress

---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: dev-back-srv
  namespace: devendra
spec:
  type: ClusterIP
  selector:
    app: dev
  ports:
  - name: https
    protocol: TCP
    port: 8000
    targetPort: 8000

---
# TLS Secret with Self-Signed Certificate
apiVersion: v1
kind: Secret
metadata:
  name: my-tls-secret
  namespace: devendra
type: kubernetes.io/tls
data:
  tls.crt: |
    MIIC8jCCAdqgAwIBAgIUdO5N8uDW8uM0vBl2Xg8nEnF32PEwDQYJKoZIhvcNAQEL
    BQAwFjEUMBIGA1UEAwwLZXhhbXBsZS5jb20wHhcNMjUwMzA1MDkyMzQxWhcNMjYw
    MzA1MDkyMzQxWjAWMRQwEgYDVQQDDAtleGFtcGxlLmNvbTCCASIwDQYJKoZIhvcN
    AQEBBQADggEPADCCAQoCggEBANnT9x3bT8o4Um2OrJ2A8gJ6lJ9vW5qIUV9j3Xv+
    8O6o5z8W7qA3mT5W2vKk7XvXzE5l9P8e9z9z8z5v7z9v8z5v7z9v8z5v7z9v8z5v
    7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v
    7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v
    7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v
    7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7zCAwEAAa
    NTMEEwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFIu
    5zT6p9o5V5g5X9g5X9g5X9g5XMA0GCSqGSIb3DQEBCwUAA4IBAQB8z5v7z9v8z5v7
    z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z
    9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9
    v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v
    8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8
    z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z
    5v7z9v8z5v7z9v8z5v7z9v8z5v7z9v8z
  tls.key: |
    MIIEpAIBAAKCAQEA2dP3HdtPyjhSbY6snYDyAnqUn29bnohRX2Pde/7w7qjnPxbu
    oDeZPlba8qTte9fMTmX0/x73P3PzPm/vP2/zPm/vP2/zPm/vP2/zPm/vP2/zPm/v
    P2/zPm/vP2/zPm/vP2/zPm/vP2/zPm/vP2/zPm/vP2/zPm/vP2/zPm/vP2/zPm/v
    P2/zPm/vP2/zPm/vP2/zPm/vP2/zPm/vP2/zPm/vP2/zPm/vP2/zPm/vP2/zPm/v
    P2/zPm/vP2/zPm/vP2/zPm/vP2/zPm/vP2/zPm/vP2/zPm/vP2/zPm/vP2/zPm/v
    P2/zPm/vP2/zPm/vP2/zPm/vP2/zPm/vP2/zPm/vP2/zPm/vP2/zPm/vP2CAwEAAQ
    KCAQEAk5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X
    9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g
    5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X
    9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g
    5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X
    9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g5X9g

---
# Ingress for Frontend and Backend
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: app-ingress
  namespace: devendra
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  tls:
    - hosts:
        - example.com
      secretName: my-tls-secret
  rules:
    - host: example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: front-dev-srv
                port:
                  number: 9980
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: dev-back-srv
                port:
                  number: 8000

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: app-ingress
  namespace: devendra
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$1  # Rewrites to sub-path after /api/v1
spec:
  tls:
    - hosts:
        - example.com
      secretName: my-tls-secret
  rules:
    - host: example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: front-dev-srv
                port:
                  number: 9980
          - path: /api/v1(/|$)(.*)  # Regex to match /api/v1 and sub-paths
            pathType: Prefix
            backend:
              service:
                name: dev-back-srv
                port:
                  number: 8000

openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
  -keyout tls.key -out tls.crt -subj "/CN=example.com"

base64 tls.crt | tr -d '\n'    \\Encode the certificat
base64 tls.key | tr -d '\n'  \\encode key

